

.. _example_applications_plot_out_of_core_classification.py:


======================================================
Out-of-core classification of text documents
======================================================

This is an example showing how scikit-learn can be used for classification
using an out-of-core approach: learning from data that doesn't fit into main
memory. We make use of an online classifier, i.e., one that supports the
partial_fit method, that will be fed with batches of examples. To guarantee
that the features space remains the same over time we leverage a
HashingVectorizer that will project each example into the same feature space.
This is especially useful in the case of text classification where new
features (words) may appear in each batch.

The dataset used in this example is Reuters-21578 as provided by the UCI ML
repository. It will be automatically downloaded and uncompressed on first run.

The plot represents the learning curve of the classifier: the evolution
of classification accuracy over the course of the mini-batches. Accuracy is
measured on the first 1000 samples, held out as a validation set.

To limit the memory consumption, we queue examples up to a fixed amount before
feeding them to the learner.



.. rst-class:: horizontal


    *

      .. image:: images/plot_out_of_core_classification_001.png
            :scale: 47

    *

      .. image:: images/plot_out_of_core_classification_002.png
            :scale: 47

    *

      .. image:: images/plot_out_of_core_classification_003.png
            :scale: 47

    *

      .. image:: images/plot_out_of_core_classification_004.png
            :scale: 47


**Script output**::

  Test set is 878 documents (108 positive)
    Passive-Aggressive classifier :          962 train docs (   132 positive)    878 test docs (   108 positive) accuracy: 0.927 in 1.64s (  584 docs/s)
            Perceptron classifier :          962 train docs (   132 positive)    878 test docs (   108 positive) accuracy: 0.921 in 1.65s (  583 docs/s)
                   SGD classifier :          962 train docs (   132 positive)    878 test docs (   108 positive) accuracy: 0.902 in 1.65s (  582 docs/s)
        NB Multinomial classifier :          962 train docs (   132 positive)    878 test docs (   108 positive) accuracy: 0.877 in 1.68s (  572 docs/s)
  
  
    Passive-Aggressive classifier :         3911 train docs (   517 positive)    878 test docs (   108 positive) accuracy: 0.938 in 4.30s (  909 docs/s)
            Perceptron classifier :         3911 train docs (   517 positive)    878 test docs (   108 positive) accuracy: 0.926 in 4.30s (  908 docs/s)
                   SGD classifier :         3911 train docs (   517 positive)    878 test docs (   108 positive) accuracy: 0.948 in 4.31s (  908 docs/s)
        NB Multinomial classifier :         3911 train docs (   517 positive)    878 test docs (   108 positive) accuracy: 0.885 in 4.33s (  902 docs/s)
  
  
    Passive-Aggressive classifier :         6821 train docs (   891 positive)    878 test docs (   108 positive) accuracy: 0.954 in 6.90s (  988 docs/s)
            Perceptron classifier :         6821 train docs (   891 positive)    878 test docs (   108 positive) accuracy: 0.949 in 6.90s (  988 docs/s)
                   SGD classifier :         6821 train docs (   891 positive)    878 test docs (   108 positive) accuracy: 0.953 in 6.91s (  987 docs/s)
        NB Multinomial classifier :         6821 train docs (   891 positive)    878 test docs (   108 positive) accuracy: 0.899 in 6.93s (  983 docs/s)
  
  
    Passive-Aggressive classifier :         9759 train docs (  1276 positive)    878 test docs (   108 positive) accuracy: 0.968 in 9.57s ( 1019 docs/s)
            Perceptron classifier :         9759 train docs (  1276 positive)    878 test docs (   108 positive) accuracy: 0.950 in 9.58s ( 1019 docs/s)
                   SGD classifier :         9759 train docs (  1276 positive)    878 test docs (   108 positive) accuracy: 0.954 in 9.58s ( 1018 docs/s)
        NB Multinomial classifier :         9759 train docs (  1276 positive)    878 test docs (   108 positive) accuracy: 0.909 in 9.61s ( 1015 docs/s)
  
  
    Passive-Aggressive classifier :        11680 train docs (  1499 positive)    878 test docs (   108 positive) accuracy: 0.951 in 11.97s (  975 docs/s)
            Perceptron classifier :        11680 train docs (  1499 positive)    878 test docs (   108 positive) accuracy: 0.951 in 11.97s (  975 docs/s)
                   SGD classifier :        11680 train docs (  1499 positive)    878 test docs (   108 positive) accuracy: 0.942 in 11.98s (  975 docs/s)
        NB Multinomial classifier :        11680 train docs (  1499 positive)    878 test docs (   108 positive) accuracy: 0.916 in 12.00s (  973 docs/s)
  
  
    Passive-Aggressive classifier :        14625 train docs (  1865 positive)    878 test docs (   108 positive) accuracy: 0.960 in 14.74s (  992 docs/s)
            Perceptron classifier :        14625 train docs (  1865 positive)    878 test docs (   108 positive) accuracy: 0.956 in 14.75s (  991 docs/s)
                   SGD classifier :        14625 train docs (  1865 positive)    878 test docs (   108 positive) accuracy: 0.967 in 14.75s (  991 docs/s)
        NB Multinomial classifier :        14625 train docs (  1865 positive)    878 test docs (   108 positive) accuracy: 0.926 in 14.78s (  989 docs/s)
  
  
    Passive-Aggressive classifier :        17360 train docs (  2179 positive)    878 test docs (   108 positive) accuracy: 0.964 in 17.20s ( 1009 docs/s)
            Perceptron classifier :        17360 train docs (  2179 positive)    878 test docs (   108 positive) accuracy: 0.957 in 17.21s ( 1008 docs/s)
                   SGD classifier :        17360 train docs (  2179 positive)    878 test docs (   108 positive) accuracy: 0.965 in 17.21s ( 1008 docs/s)
        NB Multinomial classifier :        17360 train docs (  2179 positive)    878 test docs (   108 positive) accuracy: 0.932 in 17.24s ( 1007 docs/s)



**Python source code:** :download:`plot_out_of_core_classification.py <plot_out_of_core_classification.py>`

.. literalinclude:: plot_out_of_core_classification.py
    :lines: 25-

**Total running time of the example:**  18.80 seconds
( 0 minutes  18.80 seconds)
    